//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3053.
// 
namespace Nucleo.GoodGuide.Datasets.Datasets {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ChannelContentDataset")]
    public partial class ChannelContentDataset : global::System.Data.DataSet {
        
        private ChannelContentDataTable tableChannelContent;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ChannelContentDataset() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ChannelContentDataTable ChannelContent {
            get {
                return this.tableChannelContent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ChannelContentDataset cln = ((ChannelContentDataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ChannelContent"] != null)) {
                    base.Tables.Add(new ChannelContentDataTable(ds.Tables["ChannelContent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableChannelContent = ((ChannelContentDataTable)(base.Tables["ChannelContent"]));
            if ((initTable == true)) {
                if ((this.tableChannelContent != null)) {
                    this.tableChannelContent.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ChannelContentDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ChannelContentDataset.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableChannelContent = new ChannelContentDataTable();
            base.Tables.Add(this.tableChannelContent);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChannelContent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ChannelContentDataset ds = new ChannelContentDataset();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ChannelContentRowChangeEventHandler(object sender, ChannelContentRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChannelContentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnGpsRegionId;
            
            private global::System.Data.DataColumn columnDestinationId;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnHeading;
            
            private global::System.Data.DataColumn columnHeadingVariance;
            
            private global::System.Data.DataColumn columnAutoPresent;
            
            private global::System.Data.DataColumn columnTriggerType;
            
            private global::System.Data.DataColumn columnFillerDelay;
            
            private global::System.Data.DataColumn columnFillerContinueAfterInterrupt;
            
            private global::System.Data.DataColumn columnPresentedCount;
            
            private global::System.Data.DataColumn columnMaxPresentedCount;
            
            private global::System.Data.DataColumn columnActivePeriodStartDtm;
            
            private global::System.Data.DataColumn columnActivePeriodEndDtm;
            
            private global::System.Data.DataColumn columnActivePeriodIsSeason;
            
            private global::System.Data.DataColumn columnActiveStartTime;
            
            private global::System.Data.DataColumn columnActiveEndTime;
            
            private global::System.Data.DataColumn columnActiveDays;
            
            private global::System.Data.DataColumn columnSuppressedByParent;
            
            private global::System.Data.DataColumn columnHasLinkedContent;
            
            private global::System.Data.DataColumn columnIsSequenced;
            
            private global::System.Data.DataColumn columnSequencePredecessorIsComplete;
            
            private global::System.Data.DataColumn columnSequenceSuccessor;
            
            private global::System.Data.DataColumn columnIsFiller;
            
            private global::System.Data.DataColumn columnContentItemFilename;
            
            private global::System.Data.DataColumn columnContentTypeCode;
            
            private global::System.Data.DataColumn columnSequencePredecessor;
            
            private global::System.Data.DataColumn columnSequenceIsComplete;
            
            private global::System.Data.DataColumn columnChannelGroupId;
            
            private global::System.Data.DataColumn columnSpeedBelowThreshold;
            
            private global::System.Data.DataColumn columnWhileSpeedBelowThreshold;
            
            private global::System.Data.DataColumn columnSpeedAboveThreshold;
            
            private global::System.Data.DataColumn columnWhileSpeedAboveThreshold;
            
            private global::System.Data.DataColumn columnSpeedThresholdCanRetrigger;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChannelContentDataTable() {
                this.TableName = "ChannelContent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChannelContentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GpsRegionIdColumn {
                get {
                    return this.columnGpsRegionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationIdColumn {
                get {
                    return this.columnDestinationId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingColumn {
                get {
                    return this.columnHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingVarianceColumn {
                get {
                    return this.columnHeadingVariance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoPresentColumn {
                get {
                    return this.columnAutoPresent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerTypeColumn {
                get {
                    return this.columnTriggerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FillerDelayColumn {
                get {
                    return this.columnFillerDelay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FillerContinueAfterInterruptColumn {
                get {
                    return this.columnFillerContinueAfterInterrupt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresentedCountColumn {
                get {
                    return this.columnPresentedCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxPresentedCountColumn {
                get {
                    return this.columnMaxPresentedCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivePeriodStartDtmColumn {
                get {
                    return this.columnActivePeriodStartDtm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivePeriodEndDtmColumn {
                get {
                    return this.columnActivePeriodEndDtm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActivePeriodIsSeasonColumn {
                get {
                    return this.columnActivePeriodIsSeason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveStartTimeColumn {
                get {
                    return this.columnActiveStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveEndTimeColumn {
                get {
                    return this.columnActiveEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveDaysColumn {
                get {
                    return this.columnActiveDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuppressedByParentColumn {
                get {
                    return this.columnSuppressedByParent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasLinkedContentColumn {
                get {
                    return this.columnHasLinkedContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSequencedColumn {
                get {
                    return this.columnIsSequenced;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequencePredecessorIsCompleteColumn {
                get {
                    return this.columnSequencePredecessorIsComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceSuccessorColumn {
                get {
                    return this.columnSequenceSuccessor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFillerColumn {
                get {
                    return this.columnIsFiller;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContentItemFilenameColumn {
                get {
                    return this.columnContentItemFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContentTypeCodeColumn {
                get {
                    return this.columnContentTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequencePredecessorColumn {
                get {
                    return this.columnSequencePredecessor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceIsCompleteColumn {
                get {
                    return this.columnSequenceIsComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelGroupIdColumn {
                get {
                    return this.columnChannelGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpeedBelowThresholdColumn {
                get {
                    return this.columnSpeedBelowThreshold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WhileSpeedBelowThresholdColumn {
                get {
                    return this.columnWhileSpeedBelowThreshold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpeedAboveThresholdColumn {
                get {
                    return this.columnSpeedAboveThreshold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WhileSpeedAboveThresholdColumn {
                get {
                    return this.columnWhileSpeedAboveThreshold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpeedThresholdCanRetriggerColumn {
                get {
                    return this.columnSpeedThresholdCanRetrigger;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChannelContentRow this[int index] {
                get {
                    return ((ChannelContentRow)(this.Rows[index]));
                }
            }
            
            public event ChannelContentRowChangeEventHandler ChannelContentRowChanging;
            
            public event ChannelContentRowChangeEventHandler ChannelContentRowChanged;
            
            public event ChannelContentRowChangeEventHandler ChannelContentRowDeleting;
            
            public event ChannelContentRowChangeEventHandler ChannelContentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChannelContentRow(ChannelContentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChannelContentRow AddChannelContentRow(
                        int Id, 
                        int GpsRegionId, 
                        int DestinationId, 
                        byte Priority, 
                        short Heading, 
                        short HeadingVariance, 
                        bool AutoPresent, 
                        string TriggerType, 
                        short FillerDelay, 
                        bool FillerContinueAfterInterrupt, 
                        short PresentedCount, 
                        short MaxPresentedCount, 
                        System.DateTime ActivePeriodStartDtm, 
                        System.DateTime ActivePeriodEndDtm, 
                        bool ActivePeriodIsSeason, 
                        int ActiveStartTime, 
                        int ActiveEndTime, 
                        byte ActiveDays, 
                        bool SuppressedByParent, 
                        bool HasLinkedContent, 
                        bool IsSequenced, 
                        bool SequencePredecessorIsComplete, 
                        int SequenceSuccessor, 
                        bool IsFiller, 
                        string ContentItemFilename, 
                        string ContentTypeCode, 
                        int SequencePredecessor, 
                        bool SequenceIsComplete, 
                        int ChannelGroupId, 
                        short SpeedBelowThreshold, 
                        bool WhileSpeedBelowThreshold, 
                        short SpeedAboveThreshold, 
                        bool WhileSpeedAboveThreshold, 
                        bool SpeedThresholdCanRetrigger) {
                ChannelContentRow rowChannelContentRow = ((ChannelContentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        GpsRegionId,
                        DestinationId,
                        Priority,
                        Heading,
                        HeadingVariance,
                        AutoPresent,
                        TriggerType,
                        FillerDelay,
                        FillerContinueAfterInterrupt,
                        PresentedCount,
                        MaxPresentedCount,
                        ActivePeriodStartDtm,
                        ActivePeriodEndDtm,
                        ActivePeriodIsSeason,
                        ActiveStartTime,
                        ActiveEndTime,
                        ActiveDays,
                        SuppressedByParent,
                        HasLinkedContent,
                        IsSequenced,
                        SequencePredecessorIsComplete,
                        SequenceSuccessor,
                        IsFiller,
                        ContentItemFilename,
                        ContentTypeCode,
                        SequencePredecessor,
                        SequenceIsComplete,
                        ChannelGroupId,
                        SpeedBelowThreshold,
                        WhileSpeedBelowThreshold,
                        SpeedAboveThreshold,
                        WhileSpeedAboveThreshold,
                        SpeedThresholdCanRetrigger};
                rowChannelContentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChannelContentRow);
                return rowChannelContentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChannelContentDataTable cln = ((ChannelContentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChannelContentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnGpsRegionId = base.Columns["GpsRegionId"];
                this.columnDestinationId = base.Columns["DestinationId"];
                this.columnPriority = base.Columns["Priority"];
                this.columnHeading = base.Columns["Heading"];
                this.columnHeadingVariance = base.Columns["HeadingVariance"];
                this.columnAutoPresent = base.Columns["AutoPresent"];
                this.columnTriggerType = base.Columns["TriggerType"];
                this.columnFillerDelay = base.Columns["FillerDelay"];
                this.columnFillerContinueAfterInterrupt = base.Columns["FillerContinueAfterInterrupt"];
                this.columnPresentedCount = base.Columns["PresentedCount"];
                this.columnMaxPresentedCount = base.Columns["MaxPresentedCount"];
                this.columnActivePeriodStartDtm = base.Columns["ActivePeriodStartDtm"];
                this.columnActivePeriodEndDtm = base.Columns["ActivePeriodEndDtm"];
                this.columnActivePeriodIsSeason = base.Columns["ActivePeriodIsSeason"];
                this.columnActiveStartTime = base.Columns["ActiveStartTime"];
                this.columnActiveEndTime = base.Columns["ActiveEndTime"];
                this.columnActiveDays = base.Columns["ActiveDays"];
                this.columnSuppressedByParent = base.Columns["SuppressedByParent"];
                this.columnHasLinkedContent = base.Columns["HasLinkedContent"];
                this.columnIsSequenced = base.Columns["IsSequenced"];
                this.columnSequencePredecessorIsComplete = base.Columns["SequencePredecessorIsComplete"];
                this.columnSequenceSuccessor = base.Columns["SequenceSuccessor"];
                this.columnIsFiller = base.Columns["IsFiller"];
                this.columnContentItemFilename = base.Columns["ContentItemFilename"];
                this.columnContentTypeCode = base.Columns["ContentTypeCode"];
                this.columnSequencePredecessor = base.Columns["SequencePredecessor"];
                this.columnSequenceIsComplete = base.Columns["SequenceIsComplete"];
                this.columnChannelGroupId = base.Columns["ChannelGroupId"];
                this.columnSpeedBelowThreshold = base.Columns["SpeedBelowThreshold"];
                this.columnWhileSpeedBelowThreshold = base.Columns["WhileSpeedBelowThreshold"];
                this.columnSpeedAboveThreshold = base.Columns["SpeedAboveThreshold"];
                this.columnWhileSpeedAboveThreshold = base.Columns["WhileSpeedAboveThreshold"];
                this.columnSpeedThresholdCanRetrigger = base.Columns["SpeedThresholdCanRetrigger"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnGpsRegionId = new global::System.Data.DataColumn("GpsRegionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGpsRegionId);
                this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationId);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnHeading = new global::System.Data.DataColumn("Heading", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeading);
                this.columnHeadingVariance = new global::System.Data.DataColumn("HeadingVariance", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingVariance);
                this.columnAutoPresent = new global::System.Data.DataColumn("AutoPresent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoPresent);
                this.columnTriggerType = new global::System.Data.DataColumn("TriggerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerType);
                this.columnFillerDelay = new global::System.Data.DataColumn("FillerDelay", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFillerDelay);
                this.columnFillerContinueAfterInterrupt = new global::System.Data.DataColumn("FillerContinueAfterInterrupt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFillerContinueAfterInterrupt);
                this.columnPresentedCount = new global::System.Data.DataColumn("PresentedCount", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresentedCount);
                this.columnMaxPresentedCount = new global::System.Data.DataColumn("MaxPresentedCount", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxPresentedCount);
                this.columnActivePeriodStartDtm = new global::System.Data.DataColumn("ActivePeriodStartDtm", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivePeriodStartDtm);
                this.columnActivePeriodEndDtm = new global::System.Data.DataColumn("ActivePeriodEndDtm", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivePeriodEndDtm);
                this.columnActivePeriodIsSeason = new global::System.Data.DataColumn("ActivePeriodIsSeason", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivePeriodIsSeason);
                this.columnActiveStartTime = new global::System.Data.DataColumn("ActiveStartTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveStartTime);
                this.columnActiveEndTime = new global::System.Data.DataColumn("ActiveEndTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveEndTime);
                this.columnActiveDays = new global::System.Data.DataColumn("ActiveDays", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveDays);
                this.columnSuppressedByParent = new global::System.Data.DataColumn("SuppressedByParent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuppressedByParent);
                this.columnHasLinkedContent = new global::System.Data.DataColumn("HasLinkedContent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasLinkedContent);
                this.columnIsSequenced = new global::System.Data.DataColumn("IsSequenced", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSequenced);
                this.columnSequencePredecessorIsComplete = new global::System.Data.DataColumn("SequencePredecessorIsComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequencePredecessorIsComplete);
                this.columnSequenceSuccessor = new global::System.Data.DataColumn("SequenceSuccessor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceSuccessor);
                this.columnIsFiller = new global::System.Data.DataColumn("IsFiller", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFiller);
                this.columnContentItemFilename = new global::System.Data.DataColumn("ContentItemFilename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentItemFilename);
                this.columnContentTypeCode = new global::System.Data.DataColumn("ContentTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentTypeCode);
                this.columnSequencePredecessor = new global::System.Data.DataColumn("SequencePredecessor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequencePredecessor);
                this.columnSequenceIsComplete = new global::System.Data.DataColumn("SequenceIsComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceIsComplete);
                this.columnChannelGroupId = new global::System.Data.DataColumn("ChannelGroupId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannelGroupId);
                this.columnSpeedBelowThreshold = new global::System.Data.DataColumn("SpeedBelowThreshold", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeedBelowThreshold);
                this.columnWhileSpeedBelowThreshold = new global::System.Data.DataColumn("WhileSpeedBelowThreshold", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWhileSpeedBelowThreshold);
                this.columnSpeedAboveThreshold = new global::System.Data.DataColumn("SpeedAboveThreshold", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeedAboveThreshold);
                this.columnWhileSpeedAboveThreshold = new global::System.Data.DataColumn("WhileSpeedAboveThreshold", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWhileSpeedAboveThreshold);
                this.columnSpeedThresholdCanRetrigger = new global::System.Data.DataColumn("SpeedThresholdCanRetrigger", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpeedThresholdCanRetrigger);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChannelContentRow NewChannelContentRow() {
                return ((ChannelContentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChannelContentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChannelContentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChannelContentRowChanged != null)) {
                    this.ChannelContentRowChanged(this, new ChannelContentRowChangeEvent(((ChannelContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChannelContentRowChanging != null)) {
                    this.ChannelContentRowChanging(this, new ChannelContentRowChangeEvent(((ChannelContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChannelContentRowDeleted != null)) {
                    this.ChannelContentRowDeleted(this, new ChannelContentRowChangeEvent(((ChannelContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChannelContentRowDeleting != null)) {
                    this.ChannelContentRowDeleting(this, new ChannelContentRowChangeEvent(((ChannelContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChannelContentRow(ChannelContentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ChannelContentDataset ds = new ChannelContentDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChannelContentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ChannelContentRow : global::System.Data.DataRow {
            
            private ChannelContentDataTable tableChannelContent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChannelContentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChannelContent = ((ChannelContentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GpsRegionId {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.GpsRegionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GpsRegionId\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.GpsRegionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DestinationId {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.DestinationIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationId\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.DestinationIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Priority {
                get {
                    try {
                        return ((byte)(this[this.tableChannelContent.PriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Priority\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Heading {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.HeadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Heading\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.HeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short HeadingVariance {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.HeadingVarianceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeadingVariance\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.HeadingVarianceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AutoPresent {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.AutoPresentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AutoPresent\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.AutoPresentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TriggerType {
                get {
                    if (this.IsTriggerTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableChannelContent.TriggerTypeColumn]));
                    }
                }
                set {
                    this[this.tableChannelContent.TriggerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FillerDelay {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.FillerDelayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FillerDelay\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.FillerDelayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FillerContinueAfterInterrupt {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.FillerContinueAfterInterruptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FillerContinueAfterInterrupt\' in table \'ChannelContent\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.FillerContinueAfterInterruptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PresentedCount {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.PresentedCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PresentedCount\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.PresentedCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MaxPresentedCount {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.MaxPresentedCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxPresentedCount\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.MaxPresentedCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActivePeriodStartDtm {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableChannelContent.ActivePeriodStartDtmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActivePeriodStartDtm\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ActivePeriodStartDtmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActivePeriodEndDtm {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableChannelContent.ActivePeriodEndDtmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActivePeriodEndDtm\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ActivePeriodEndDtmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ActivePeriodIsSeason {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.ActivePeriodIsSeasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActivePeriodIsSeason\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ActivePeriodIsSeasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActiveStartTime {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.ActiveStartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActiveStartTime\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ActiveStartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActiveEndTime {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.ActiveEndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActiveEndTime\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ActiveEndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ActiveDays {
                get {
                    try {
                        return ((byte)(this[this.tableChannelContent.ActiveDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActiveDays\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ActiveDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SuppressedByParent {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.SuppressedByParentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SuppressedByParent\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SuppressedByParentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasLinkedContent {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.HasLinkedContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasLinkedContent\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.HasLinkedContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenced {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.IsSequencedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSequenced\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.IsSequencedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SequencePredecessorIsComplete {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.SequencePredecessorIsCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SequencePredecessorIsComplete\' in table \'ChannelContent\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SequencePredecessorIsCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequenceSuccessor {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.SequenceSuccessorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SequenceSuccessor\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SequenceSuccessorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiller {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.IsFillerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFiller\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.IsFillerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContentItemFilename {
                get {
                    if (this.IsContentItemFilenameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableChannelContent.ContentItemFilenameColumn]));
                    }
                }
                set {
                    this[this.tableChannelContent.ContentItemFilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContentTypeCode {
                get {
                    if (this.IsContentTypeCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableChannelContent.ContentTypeCodeColumn]));
                    }
                }
                set {
                    this[this.tableChannelContent.ContentTypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequencePredecessor {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.SequencePredecessorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SequencePredecessor\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SequencePredecessorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SequenceIsComplete {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.SequenceIsCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SequenceIsComplete\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SequenceIsCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChannelGroupId {
                get {
                    try {
                        return ((int)(this[this.tableChannelContent.ChannelGroupIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChannelGroupId\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.ChannelGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SpeedBelowThreshold {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.SpeedBelowThresholdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpeedBelowThreshold\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SpeedBelowThresholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WhileSpeedBelowThreshold {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.WhileSpeedBelowThresholdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WhileSpeedBelowThreshold\' in table \'ChannelContent\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.WhileSpeedBelowThresholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SpeedAboveThreshold {
                get {
                    try {
                        return ((short)(this[this.tableChannelContent.SpeedAboveThresholdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpeedAboveThreshold\' in table \'ChannelContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SpeedAboveThresholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WhileSpeedAboveThreshold {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.WhileSpeedAboveThresholdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WhileSpeedAboveThreshold\' in table \'ChannelContent\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.WhileSpeedAboveThresholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SpeedThresholdCanRetrigger {
                get {
                    try {
                        return ((bool)(this[this.tableChannelContent.SpeedThresholdCanRetriggerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpeedThresholdCanRetrigger\' in table \'ChannelContent\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableChannelContent.SpeedThresholdCanRetriggerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableChannelContent.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableChannelContent.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGpsRegionIdNull() {
                return this.IsNull(this.tableChannelContent.GpsRegionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGpsRegionIdNull() {
                this[this.tableChannelContent.GpsRegionIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationIdNull() {
                return this.IsNull(this.tableChannelContent.DestinationIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationIdNull() {
                this[this.tableChannelContent.DestinationIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableChannelContent.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableChannelContent.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadingNull() {
                return this.IsNull(this.tableChannelContent.HeadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadingNull() {
                this[this.tableChannelContent.HeadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadingVarianceNull() {
                return this.IsNull(this.tableChannelContent.HeadingVarianceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadingVarianceNull() {
                this[this.tableChannelContent.HeadingVarianceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoPresentNull() {
                return this.IsNull(this.tableChannelContent.AutoPresentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoPresentNull() {
                this[this.tableChannelContent.AutoPresentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTriggerTypeNull() {
                return this.IsNull(this.tableChannelContent.TriggerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTriggerTypeNull() {
                this[this.tableChannelContent.TriggerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFillerDelayNull() {
                return this.IsNull(this.tableChannelContent.FillerDelayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFillerDelayNull() {
                this[this.tableChannelContent.FillerDelayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFillerContinueAfterInterruptNull() {
                return this.IsNull(this.tableChannelContent.FillerContinueAfterInterruptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFillerContinueAfterInterruptNull() {
                this[this.tableChannelContent.FillerContinueAfterInterruptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresentedCountNull() {
                return this.IsNull(this.tableChannelContent.PresentedCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresentedCountNull() {
                this[this.tableChannelContent.PresentedCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxPresentedCountNull() {
                return this.IsNull(this.tableChannelContent.MaxPresentedCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxPresentedCountNull() {
                this[this.tableChannelContent.MaxPresentedCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivePeriodStartDtmNull() {
                return this.IsNull(this.tableChannelContent.ActivePeriodStartDtmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivePeriodStartDtmNull() {
                this[this.tableChannelContent.ActivePeriodStartDtmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivePeriodEndDtmNull() {
                return this.IsNull(this.tableChannelContent.ActivePeriodEndDtmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivePeriodEndDtmNull() {
                this[this.tableChannelContent.ActivePeriodEndDtmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivePeriodIsSeasonNull() {
                return this.IsNull(this.tableChannelContent.ActivePeriodIsSeasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivePeriodIsSeasonNull() {
                this[this.tableChannelContent.ActivePeriodIsSeasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveStartTimeNull() {
                return this.IsNull(this.tableChannelContent.ActiveStartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveStartTimeNull() {
                this[this.tableChannelContent.ActiveStartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveEndTimeNull() {
                return this.IsNull(this.tableChannelContent.ActiveEndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveEndTimeNull() {
                this[this.tableChannelContent.ActiveEndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveDaysNull() {
                return this.IsNull(this.tableChannelContent.ActiveDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveDaysNull() {
                this[this.tableChannelContent.ActiveDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuppressedByParentNull() {
                return this.IsNull(this.tableChannelContent.SuppressedByParentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuppressedByParentNull() {
                this[this.tableChannelContent.SuppressedByParentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasLinkedContentNull() {
                return this.IsNull(this.tableChannelContent.HasLinkedContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasLinkedContentNull() {
                this[this.tableChannelContent.HasLinkedContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSequencedNull() {
                return this.IsNull(this.tableChannelContent.IsSequencedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSequencedNull() {
                this[this.tableChannelContent.IsSequencedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequencePredecessorIsCompleteNull() {
                return this.IsNull(this.tableChannelContent.SequencePredecessorIsCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequencePredecessorIsCompleteNull() {
                this[this.tableChannelContent.SequencePredecessorIsCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceSuccessorNull() {
                return this.IsNull(this.tableChannelContent.SequenceSuccessorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceSuccessorNull() {
                this[this.tableChannelContent.SequenceSuccessorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFillerNull() {
                return this.IsNull(this.tableChannelContent.IsFillerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFillerNull() {
                this[this.tableChannelContent.IsFillerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContentItemFilenameNull() {
                return this.IsNull(this.tableChannelContent.ContentItemFilenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContentItemFilenameNull() {
                this[this.tableChannelContent.ContentItemFilenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContentTypeCodeNull() {
                return this.IsNull(this.tableChannelContent.ContentTypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContentTypeCodeNull() {
                this[this.tableChannelContent.ContentTypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequencePredecessorNull() {
                return this.IsNull(this.tableChannelContent.SequencePredecessorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequencePredecessorNull() {
                this[this.tableChannelContent.SequencePredecessorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceIsCompleteNull() {
                return this.IsNull(this.tableChannelContent.SequenceIsCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceIsCompleteNull() {
                this[this.tableChannelContent.SequenceIsCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannelGroupIdNull() {
                return this.IsNull(this.tableChannelContent.ChannelGroupIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChannelGroupIdNull() {
                this[this.tableChannelContent.ChannelGroupIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpeedBelowThresholdNull() {
                return this.IsNull(this.tableChannelContent.SpeedBelowThresholdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpeedBelowThresholdNull() {
                this[this.tableChannelContent.SpeedBelowThresholdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWhileSpeedBelowThresholdNull() {
                return this.IsNull(this.tableChannelContent.WhileSpeedBelowThresholdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWhileSpeedBelowThresholdNull() {
                this[this.tableChannelContent.WhileSpeedBelowThresholdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpeedAboveThresholdNull() {
                return this.IsNull(this.tableChannelContent.SpeedAboveThresholdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpeedAboveThresholdNull() {
                this[this.tableChannelContent.SpeedAboveThresholdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWhileSpeedAboveThresholdNull() {
                return this.IsNull(this.tableChannelContent.WhileSpeedAboveThresholdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWhileSpeedAboveThresholdNull() {
                this[this.tableChannelContent.WhileSpeedAboveThresholdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpeedThresholdCanRetriggerNull() {
                return this.IsNull(this.tableChannelContent.SpeedThresholdCanRetriggerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpeedThresholdCanRetriggerNull() {
                this[this.tableChannelContent.SpeedThresholdCanRetriggerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ChannelContentRowChangeEvent : global::System.EventArgs {
            
            private ChannelContentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChannelContentRowChangeEvent(ChannelContentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChannelContentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ChannelContentDatasetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
